from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth import login, logout
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import HttpResponseForbidden
from django.utils import timezone
from django.template.loader import render_to_string
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.utils.encoding import force_bytes, force_str
from django.urls import reverse
from django.core.mail import send_mail

from .forms import (
    CustomUserCreationForm,
    HomeworkForm,
    GradeForm,
    ProfileForm,
    SubmissionForm,
    AttendanceForm,
)
from .models import (
    CustomUser,
    Schedule,
    Grade,
    Homework,
    HomeworkSubmission,
    Attendance,
)
from .tokens import email_verification_token

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π
def teacher_required(view_func):
    def _wrapped(request, *args, **kwargs):
        if not request.user.is_authenticated or request.user.role != 'teacher':
            return HttpResponseForbidden("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π")
        return view_func(request, *args, **kwargs)
    return _wrapped

# üë§ –õ–û–ì–ò–ù
def login_view(request):
    if request.method == 'POST':
        form = AuthenticationForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect('schedule')
    else:
        form = AuthenticationForm()
    return render(request, 'login.html', {'form': form})

# üëã –í–´–•–û–î
def logout_view(request):
    logout(request)
    return redirect('login')

# üë§ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ –ø–æ—á—Ç–µ
def register_view(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save(commit=False)
            user.is_active = False
            user.save()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ uid
            uid = urlsafe_base64_encode(force_bytes(user.pk))
            token = email_verification_token.make_token(user)
            activation_url = request.build_absolute_uri(
                reverse('activate', kwargs={'uidb64': uid, 'token': token})
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
            subject = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ AIDI Journal'
            message = render_to_string('email/activate_account.html', {
                'user': user,
                'activate_url': activation_url,
            })
            send_mail(subject, message, None, [user.email])

            messages.success(request,
                '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.'
            )
            return redirect('login')
    else:
        form = CustomUserCreationForm()
    return render(request, 'register.html', {'form': form})

# üì® –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
def activate_account(request, uidb64, token):
    try:
        uid = force_str(urlsafe_base64_decode(uidb64))
        user = CustomUser.objects.get(pk=uid)
    except (TypeError, ValueError, OverflowError, CustomUser.DoesNotExist):
        user = None

    if user is not None and email_verification_token.check_token(user, token):
        user.is_active = True
        user.save()
        messages.success(request, '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.')
        return redirect('login')

    messages.error(request, '–°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.')
    return redirect('home')

# üè† –õ–ê–ù–î–ò–ù–ì
def landing_view(request):
    return render(request, 'index.html')

# üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï
@login_required
def schedule_view(request):
    schedule = Schedule.objects.all()
    return render(request, 'schedule.html', {'schedule': schedule})

# üìä –û–¶–ï–ù–ö–ò (—Å–ø–∏—Å–æ–∫)
@login_required
def grades_view(request):
    grades = Grade.objects.all()
    return render(request, 'grades.html', {'grades': grades})

# üìù –î–û–ú–ê–®–ö–ê (—Å–ø–∏—Å–æ–∫)
@login_required
def homework_view(request):
    homework = Homework.objects.all()
    return render(request, 'homework.html', {'homework': homework})

# ‚ûï –î–û–ë–ê–í–ò–¢–¨ –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï
@login_required
@teacher_required
def add_homework(request):
    form = HomeworkForm(request.POST or None)
    if request.method == 'POST' and form.is_valid():
        hw = form.save(commit=False)
        hw.teacher = request.user
        hw.save()
        messages.success(request, "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        return redirect('homework')
    return render(request, 'add_homework.html', {'form': form})

# ‚ûï –î–û–ë–ê–í–ò–¢–¨ –û–¶–ï–ù–ö–£
@login_required
@teacher_required
def add_grade(request):
    form = GradeForm(request.POST or None)
    if request.method == 'POST' and form.is_valid():
        form.save()
        messages.success(request, "–û—Ü–µ–Ω–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞")
        return redirect('grades')
    return render(request, 'add_grade.html', {'form': form})

# üë§ –ü–†–û–§–ò–õ–¨ (–ø—Ä–æ—Å–º–æ—Ç—Ä)
@login_required
def profile_view(request):
    return render(request, 'profile.html')

# üë§ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø
@login_required
def profile_edit(request):
    form = ProfileForm(request.POST or None, request.FILES or None, instance=request.user)
    if request.method == 'POST':
        if form.is_valid():
            form.save()
            messages.success(request, "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω")
            return redirect('profile')
        messages.error(request, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º—É –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")
    return render(request, 'profile_edit.html', {'form': form})

# ‚úçÔ∏è –°–î–ê–ß–ê –î–û–ú–ê–®–ù–ï–ì–û –ó–ê–î–ê–ù–ò–Ø
@login_required
def submit_homework(request, hw_id):
    hw = get_object_or_404(Homework, id=hw_id)
    if request.user.role != 'student':
        return HttpResponseForbidden("–¢–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∏ –º–æ–≥—É—Ç —Å–¥–∞–≤–∞—Ç—å –î–ó")
    if hw.due_date < timezone.localdate():
        messages.error(request, "–°—Ä–æ–∫ —Å–¥–∞—á–∏ –∏—Å—Ç—ë–∫")
        return redirect('homework')
    submission = HomeworkSubmission.objects.filter(homework=hw, student=request.user).first()
    if request.method == 'POST':
        form = SubmissionForm(request.POST, request.FILES, instance=submission)
        if form.is_valid():
            obj = form.save(commit=False)
            obj.homework = hw
            obj.student = request.user
            obj.submitted = timezone.now()
            obj.save()
            messages.success(request, "–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return redirect('homework')
        messages.error(request, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ.")
    else:
        form = SubmissionForm(instance=submission)
    return render(request, 'submit_homework.html', {
        'homework': hw,
        'form': form,
        'submission': submission,
    })

# üìù –û–¢–ú–ï–¢–ö–ê –ü–û–°–ï–©–ê–ï–ú–û–°–¢–ò
@login_required
@teacher_required
def mark_attendance(request):
    if request.method == 'POST':
        form = AttendanceForm(request.POST)
        if form.is_valid():
            date = form.cleaned_data['date']
            lesson = form.cleaned_data['schedule_item']
            present_students = form.cleaned_data['students']
            Attendance.objects.filter(schedule_item=lesson, date=date).delete()
            for student in CustomUser.objects.filter(role='student'):
                Attendance.objects.create(
                    schedule_item=lesson,
                    student=student,
                    date=date,
                    present=(student in present_students)
                )
            messages.success(request, f"–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞ {date} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            return redirect('mark_attendance')
    else:
        form = AttendanceForm()
    return render(request, 'mark_attendance.html', {'form': form})

# üóÇÔ∏è –û–¢–ß–Å–¢ –ü–û –ü–û–°–ï–©–ê–ï–ú–û–°–¢–ò
@login_required
@teacher_required
def attendance_report(request):
    date = request.GET.get('date', timezone.localdate())
    records = Attendance.objects.filter(date=date).select_related('student', 'schedule_item')
    return render(request, 'attendance_report.html', {
        'records': records,
        'date': date,
    })
